import { NextRequest, NextResponse } from "next/server";
import { createClient } from "@supabase/supabase-js";
import { getSendsayService } from "@/lib/sendsay-service";

const supabase = createClient(process.env.NEXT_PUBLIC_SUPABASE_URL!, process.env.SUPABASE_KEY!);

export async function POST() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Å Sendsay...');
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Sendsay
    const sendsayService = getSendsayService();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const isConnected = await sendsayService.verifyConnection();
    if (!isConnected) {
      return NextResponse.json({ 
        error: '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Sendsay',
        mode: 'simulation'
      }, { status: 500 });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const { data: subscribers, error: subscribersError } = await supabase
      .from('newsletter_subscribers')
      .select('*');
    
    if (subscribersError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', subscribersError);
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' }, { status: 500 });
    }
    
    if (!subscribers || subscribers.length === 0) {
      return NextResponse.json({ 
        message: '–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        synced: 0,
        errors: 0
      });
    }
    
    let syncedCount = 0;
    let errorsCount = 0;
    const results = [];
    
    console.log(`üìß –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤...`);
    
    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
    for (const subscriber of subscribers) {
      try {
        if (subscriber.is_active) {
          // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
          const success = await sendsayService.addSubscriber(subscriber.email);
          if (success) {
            syncedCount++;
            results.push({
              email: subscriber.email,
              action: 'added',
              success: true
            });
          } else {
            errorsCount++;
            results.push({
              email: subscriber.email,
              action: 'add_failed',
              success: false
            });
          }
        } else {
          // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞
          const success = await sendsayService.removeSubscriber(subscriber.email);
          if (success) {
            syncedCount++;
            results.push({
              email: subscriber.email,
              action: 'removed',
              success: true
            });
          } else {
            errorsCount++;
            results.push({
              email: subscriber.email,
              action: 'remove_failed',
              success: false
            });
          }
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ${subscriber.email}:`, error);
        errorsCount++;
        results.push({
          email: subscriber.email,
          action: 'error',
          success: false,
          error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        });
      }
    }
    
    console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ ${syncedCount}, –æ—à–∏–±–æ–∫ ${errorsCount}`);
    
    return NextResponse.json({
      success: true,
      message: `–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`,
      total: subscribers.length,
      synced: syncedCount,
      errors: errorsCount,
      results: results.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      mode: results.length > 0 && results[0].email ? 'sendsay' : 'simulation'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Sendsay:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Sendsay',
      details: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
export async function GET() {
  try {
    const sendsayService = getSendsayService();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    const isConnected = await sendsayService.verifyConnection();
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const { data: subscribers, error } = await supabase
      .from('newsletter_subscribers')
      .select('is_active');
    
    if (error) {
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö' }, { status: 500 });
    }
    
    const activeCount = subscribers?.filter(s => s.is_active).length || 0;
    const inactiveCount = subscribers?.filter(s => !s.is_active).length || 0;
    
    return NextResponse.json({
      connected: isConnected,
      total_subscribers: subscribers?.length || 0,
      active_subscribers: activeCount,
      inactive_subscribers: inactiveCount,
      last_sync: null, // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
      mode: isConnected ? 'sendsay' : 'simulation'
    });
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
    return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞' }, { status: 500 });
  }
} 