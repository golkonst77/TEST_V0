import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'
import { getSendsayService } from '@/lib/sendsay-service'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Sendsay API
require('isomorphic-fetch') // –ü–æ–ª–∏—Ñ–∏–ª–ª –¥–ª—è fetch
const Sendsay = require('sendsay-api')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!
const supabaseKey = process.env.SUPABASE_KEY!
const supabase = createClient(supabaseUrl, supabaseKey)

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Sendsay –∫–ª–∏–µ–Ω—Ç
const initSendsay = () => {
  if (!process.env.SENDSAY_API_KEY) {
    console.warn('SENDSAY_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏')
    return null
  }
  
  return new Sendsay({ 
    apiKey: process.env.SENDSAY_API_KEY 
  })
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Sendsay
const sendEmailViaSendsay = async (campaign: any, subscribers: any[]) => {
  const sendsay = initSendsay()
  
  if (!sendsay) {
    // –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log('üîÑ –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏: –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏', campaign.subject)
    console.log('üìß –ü–æ–ª—É—á–∞—Ç–µ–ª–∏:', subscribers.length)
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    await new Promise(resolve => setTimeout(resolve, 1000))
    
    return {
      success: true,
      sent: subscribers.length,
      failed: 0,
      mode: 'simulation'
    }
  }
  
  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ Sendsay
    console.log('üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Sendsay API...')
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è Sendsay
    const emailList = subscribers
      .filter(sub => sub.is_active && sub.email)
      .map(sub => sub.email)
    
    if (emailList.length === 0) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é –≤ Sendsay
    const campaignData = {
      action: 'issue.send',
      letter: {
        subject: campaign.subject,
        body: {
          html: campaign.content,
          // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é
          text: campaign.content.replace(/<[^>]*>/g, '') // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤
        }
      },
      sendwhen: 'now',
      users: {
        list: emailList
      }
    }
    
    const response = await sendsay.request(campaignData)
    
    if (response.errors) {
      throw new Error(`Sendsay API –æ—à–∏–±–∫–∞: ${JSON.stringify(response.errors)}`)
    }
    
    console.log('‚úÖ –ö–∞–º–ø–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Sendsay:', response)
    
    return {
      success: true,
      sent: emailList.length,
      failed: 0,
      sendsayResponse: response,
      mode: 'sendsay'
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Sendsay:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
const logEmailResults = async (campaignId: string, emails: string[], success: boolean, mode: string) => {
  const logs = emails.map(email => ({
    campaign_id: campaignId,
    email: email,
    status: success ? 'sent' : 'failed',
    error_message: success ? null : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏',
    sent_at: new Date().toISOString()
  }));
  
  if (logs.length > 0) {
    const { error } = await supabase
      .from('newsletter_logs')
      .insert(logs);
    
    if (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–æ–≤:', error);
    } else {
      console.log(`üìù –ó–∞–ø–∏—Å–∞–Ω–æ ${logs.length} –ª–æ–≥–æ–≤ (—Ä–µ–∂–∏–º: ${mode})`);
    }
  }
};

// –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏
export async function POST(request: NextRequest, { params }: { params: { id: string } }) {
  try {
    const campaignId = params.id
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–∞–º–ø–∞–Ω–∏—é
    const { data: campaign, error: campaignError } = await supabase
      .from('newsletter_campaigns')
      .select('*')
      .eq('id', campaignId)
      .single()

    if (campaignError || !campaign) {
      return NextResponse.json({ error: '–ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
    }

    if (campaign.status === 'sent') {
      return NextResponse.json({ error: '–ö–∞–º–ø–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞' }, { status: 400 })
    }

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
    const { data: subscribers, error: subscribersError } = await supabase
      .from('newsletter_subscribers')
      .select('*')
      .eq('is_active', true)

    if (subscribersError) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:', subscribersError)
      return NextResponse.json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' }, { status: 500 })
    }

    if (!subscribers || subscribers.length === 0) {
      return NextResponse.json({ error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤' }, { status: 400 })
    }

    console.log(`üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–º–ø–∞–Ω–∏–∏ "${campaign.subject}" –¥–ª—è ${subscribers.length} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`)
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å Sendsay
      const sendsayService = getSendsayService()
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const emailCampaign = {
        subject: campaign.subject,
        content: campaign.content,
        recipients: subscribers.map(sub => sub.email).filter(Boolean)
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Sendsay
      const sendResult = await sendsayService.sendCampaign(emailCampaign)
      
      // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      await logEmailResults(
        campaignId, 
        emailCampaign.recipients, 
        sendResult.success, 
        sendResult.mode
      )
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–º–ø–∞–Ω–∏–∏
      const { error: updateError } = await supabase
        .from('newsletter_campaigns')
        .update({
          status: 'sent',
          sent_at: new Date().toISOString(),
          sent_count: sendResult.sent,
          failed_count: sendResult.failed
        })
        .eq('id', campaignId)

      if (updateError) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:', updateError)
      }
      
      const message = sendResult.mode === 'simulation' 
        ? `–ö–∞–º–ø–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–ª—è ${sendResult.sent} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`
        : `–ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ Sendsay –¥–ª—è ${sendResult.sent} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`
      
      return NextResponse.json({
        success: true,
        message,
        sent_count: sendResult.sent,
        failed_count: sendResult.failed,
        mode: sendResult.mode,
        campaign_id: campaignId,
        details: sendResult.mode === 'sendsay' ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Sendsay API' : '–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
      })
      
    } catch (sendError) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏:', sendError)
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
      await logEmailResults(
        campaignId, 
        subscribers.map(sub => sub.email).filter(Boolean), 
        false, 
        'error'
      )
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      await supabase
        .from('newsletter_campaigns')
        .update({
          status: 'draft', // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —á–µ—Ä–Ω–æ–≤–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          failed_count: subscribers.length
        })
        .eq('id', campaignId)
      
      return NextResponse.json({ 
        error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏',
        details: sendError instanceof Error ? sendError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      }, { status: 500 })
    }
    
  } catch (error) {
    console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ API:', error)
    return NextResponse.json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }, { status: 500 })
  }
} 