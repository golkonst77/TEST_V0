import { NextResponse } from 'next/server'
import { createClient } from '@supabase/supabase-js'

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_ROLE_KEY!
)

export async function POST() {
  try {
    console.log('üîÑ –ù–∞—á–∏–Ω–∞—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç...')
    
    // 1. –ü–æ–ª—É—á–∞–µ–º –æ—Ç–∑—ã–≤—ã —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç
    const yandexResponse = await fetch(`${process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'}/api/yandex-reviews`)
    
    if (!yandexResponse.ok) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–∑—ã–≤—ã —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç')
    }
    
    const yandexData = await yandexResponse.json()
    
    if (!yandexData.reviews || yandexData.reviews.length === 0) {
      return NextResponse.json({
        success: false,
        message: '–û—Ç–∑—ã–≤—ã —Å –Ø–Ω–¥–µ–∫—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
      })
    }
    
    console.log(`üì• –ü–æ–ª—É—á–µ–Ω–æ ${yandexData.reviews.length} –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å–∞`)
    
    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ—Ç–∑—ã–≤—ã –∏–∑ –ë–î
    const { data: existingReviews } = await supabase
      .from('reviews')
      .select('name, text, source')
      .eq('source', 'yandex')
    
    console.log(`üìä –í –ë–î —É–∂–µ –µ—Å—Ç—å ${existingReviews?.length || 0} –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å–∞`)
    
    // 3. –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–æ–≤—ã–µ –æ—Ç–∑—ã–≤—ã (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
    const newReviews = yandexData.reviews.filter((yandexReview: any) => {
      const isDuplicate = existingReviews?.some(dbReview => 
        dbReview.name === yandexReview.name && 
        dbReview.text === yandexReview.text
      )
      return !isDuplicate
    })
    
    console.log(`‚ú® –ù–∞–π–¥–µ–Ω–æ ${newReviews.length} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`)
    
    if (newReviews.length === 0) {
      return NextResponse.json({
        success: true,
        message: '–í—Å–µ –æ—Ç–∑—ã–≤—ã —Å –Ø–Ω–¥–µ–∫—Å–∞ —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã',
        imported: 0,
        total: yandexData.reviews.length
      })
    }
    
    // 4. –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –¥–ª—è –ë–î
    const reviewsToInsert = newReviews.map((review: any) => ({
      name: review.name || '–ì–æ—Å—Ç—å',
      rating: Math.min(Math.max(parseInt(review.rating) || 5, 1), 5), // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ —Ä–µ–π—Ç–∏–Ω–≥ 1-5
      text: review.text || '–û—Ç–∑—ã–≤ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞',
      source: 'yandex',
      is_published: true, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—É–±–ª–∏–∫—É–µ–º –æ—Ç–∑—ã–≤—ã —Å –Ø–Ω–¥–µ–∫—Å–∞
      is_featured: false, // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –≤—Ä—É—á–Ω—É—é
      published_at: new Date().toISOString(),
      admin_notes: `–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç ${new Date().toLocaleString('ru-RU')}`
    }))
    
    // 5. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    const { data: insertedReviews, error } = await supabase
      .from('reviews')
      .insert(reviewsToInsert)
      .select()
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error)
      throw error
    }
    
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${insertedReviews?.length || 0} –æ—Ç–∑—ã–≤–æ–≤`)
    
    // 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–∞
    const { data: stats } = await supabase
      .from('reviews')
      .select('source, is_published')
    
    const totalReviews = stats?.length || 0
    const yandexReviews = stats?.filter(r => r.source === 'yandex').length || 0
    const publishedReviews = stats?.filter(r => r.is_published).length || 0
    
    return NextResponse.json({
      success: true,
      message: `–£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${insertedReviews?.length} –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–æ–≤`,
      imported: insertedReviews?.length || 0,
      total: yandexData.reviews.length,
      skipped: yandexData.reviews.length - newReviews.length,
      stats: {
        totalReviews,
        yandexReviews,
        publishedReviews
      }
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤:', error)
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 })
  }
} 