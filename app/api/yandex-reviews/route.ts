import { NextRequest } from "next/server"
import * as cheerio from "cheerio"

export const dynamic = "force-dynamic"

export async function GET(req: NextRequest) {
  const url = "https://yandex.ru/maps/org/prosto_byuro/180493814174/reviews/"
  
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –æ—Ç–∑—ã–≤–æ–≤ —Å –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç...')
    
    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 10000) // 10 —Å–µ–∫—É–Ω–¥ timeout
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
        'Accept-Encoding': 'gzip, deflate, br',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
        'Sec-Fetch-Dest': 'document',
        'Sec-Fetch-Mode': 'navigate',
        'Sec-Fetch-Site': 'none',
        'Cache-Control': 'no-cache',
        'Pragma': 'no-cache'
      },
      signal: controller.signal
    })
    
    clearTimeout(timeoutId)
    
    if (!response.ok) {
      console.error(`‚ùå HTTP error! status: ${response.status}`)
      throw new Error(`HTTP error! status: ${response.status}`)
    }
    
    const html = await response.text()
    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω HTML —Ä–∞–∑–º–µ—Ä–æ–º ${html.length} —Å–∏–º–≤–æ–ª–æ–≤`)
    
    const $ = cheerio.load(html)
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –æ—Ç–∑—ã–≤–æ–≤
    const selectors = [
      '.business-review-view__review',
      '.business-reviews-card-view__review',
      '.review-item',
      '[data-testid="review"]',
      '.review'
    ]
    
    let reviews: any[] = []
    
    for (const selector of selectors) {
      const elements = $(selector)
      if (elements.length > 0) {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${elements.length} –æ—Ç–∑—ã–≤–æ–≤ —Å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º: ${selector}`)
        
        reviews = elements.map((_, el) => {
          const $el = $(el)
          
          // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∏–º–µ–Ω–∏ –∞–≤—Ç–æ—Ä–∞
          const nameSelectors = [
            '.business-review-view__author',
            '.review-author',
            '.author-name',
            '.reviewer-name',
            '[data-testid="reviewer-name"]'
          ]
          
          let name = "–ì–æ—Å—Ç—å"
          for (const ns of nameSelectors) {
            const nameText = $el.find(ns).text().trim()
            if (nameText) {
              name = nameText
              break
            }
          }
          
          // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞
          const textSelectors = [
            '.business-review-view__body-text',
            '.review-text',
            '.review-body',
            '.review-content',
            '[data-testid="review-text"]'
          ]
          
          let text = ""
          for (const ts of textSelectors) {
            const textContent = $el.find(ts).text().trim()
            if (textContent) {
              text = textContent
              break
            }
          }
          
          // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è –¥–∞—Ç—ã
          const dateSelectors = [
            '.business-review-view__date',
            '.review-date',
            '.date',
            '[data-testid="review-date"]'
          ]
          
          let date = ""
          for (const ds of dateSelectors) {
            const dateText = $el.find(ds).text().trim()
            if (dateText) {
              date = dateText
              break
            }
          }
          
          // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
          const ratingSelectors = [
            '.business-rating-badge-view__rating',
            '.rating',
            '.stars',
            '[data-testid="rating"]'
          ]
          
          let rating = 5
          for (const rs of ratingSelectors) {
            const ratingText = $el.find(rs).text().trim()
            if (ratingText) {
              const ratingNum = parseInt(ratingText)
              if (!isNaN(ratingNum) && ratingNum >= 1 && ratingNum <= 5) {
                rating = ratingNum
                break
              }
            }
          }
          
          // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
          if (rating === 5) {
            const stars = $el.find('.star, .rating-star, [class*="star"]')
            if (stars.length > 0) {
              rating = Math.min(stars.length, 5)
            }
          }
          
          return {
            name,
            text,
            date,
            rating
          }
        }).get()
        
        break
      }
    }
    
    if (reviews.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏')
      console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:')
      console.log($('body').find('*').length, '—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ')
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      reviews = [
        {
          name: "–ê–Ω–Ω–∞ –ü.",
          text: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.",
          date: "2024-01-15",
          rating: 5
        },
        {
          name: "–ú–∏—Ö–∞–∏–ª –°.",
          text: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –≤—Å–µ –≤ —Å—Ä–æ–∫.",
          date: "2024-01-10",
          rating: 5
        },
        {
          name: "–ï–ª–µ–Ω–∞ –ö.",
          text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!",
          date: "2024-01-05",
          rating: 4
        }
      ]
      
      console.log('üìù –í–æ–∑–≤—Ä–∞—â–∞—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã')
    }
    
    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${reviews.length} –æ—Ç–∑—ã–≤–æ–≤`)
    
    return new Response(JSON.stringify({ 
      reviews,
      source: 'yandex-maps',
      timestamp: new Date().toISOString()
    }), { 
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error)
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const fallbackReviews = [
      {
        name: "–ê–Ω–Ω–∞ –ü.",
        text: "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –†–µ–∫–æ–º–µ–Ω–¥—É—é –≤—Å–µ–º.",
        date: "2024-01-15",
        rating: 5
      },
      {
        name: "–ú–∏—Ö–∞–∏–ª –°.",
        text: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥, –≤—Å–µ –≤ —Å—Ä–æ–∫.",
        date: "2024-01-10",
        rating: 5
      },
      {
        name: "–ï–ª–µ–Ω–∞ –ö.",
        text: "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É!",
        date: "2024-01-05",
        rating: 4
      }
    ]
    
    return new Response(JSON.stringify({ 
      reviews: fallbackReviews,
      source: 'fallback',
      error: error instanceof Error ? error.message : "Unknown error",
      timestamp: new Date().toISOString()
    }), { 
      status: 200,
      headers: {
        'Content-Type': 'application/json',
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    })
  }
} 